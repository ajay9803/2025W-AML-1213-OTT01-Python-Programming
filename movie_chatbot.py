# -*- coding: utf-8 -*-
"""movie_chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pxGXLe9rON2bMNiRyokPlcjMf3eKLPzN
"""

!pip install gradio

import pickle
import re
from difflib import get_close_matches
import gradio as gr
from transformers import pipeline

# Load saved data
movies = pickle.load(open("movie_list.pkl", "rb"))
similarity = pickle.load(open("similarity.pkl", "rb"))

# Load Hugging Face conversational model
chatbot = pipeline("text2text-generation", model="google/flan-t5-base")

def recommend(movie_name, num_recommendations=5):
    try:
        # Try to find the closest match in the database
        movie_name = movie_name.lower().strip()

        # Check for exact match first
        exact_match = movies[movies['title'].str.lower() == movie_name]
        if not exact_match.empty:
            index = exact_match.index[0]
        else:
            # Try fuzzy matching - look for movies containing the search term
            contains_match = movies[movies['title'].str.lower().str.contains(movie_name)]
            if not contains_match.empty:
                # If multiple matches, take the most popular one (could be improved)
                index = contains_match.index[0]
            else:
                # Try to find the closest match by string similarity
                matches = get_close_matches(movie_name, movies['title'].str.lower(), n=1, cutoff=0.6)
                if matches:
                    index = movies[movies['title'].str.lower() == matches[0]].index[0]
                else:
                    return None, None  # No match found

        distances = similarity[index]
        movie_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:num_recommendations+1]
        recommendations = [movies.iloc[i[0]].title for i in movie_list]
        original_title = movies.iloc[index].title
        return original_title, recommendations
    except Exception as e:
        print(f"Error in recommend function: {e}")
        return None, None

def parse_input(user_input):
    try:
        # Check for patterns like "recommend 10 movies like Harry Potter"
        pattern = r'recommend (\d+) movies? like (.+)'
        match = re.search(pattern, user_input, re.IGNORECASE)

        if match:
            num_rec = int(match.group(1))
            movie_name = match.group(2).strip()
            return movie_name, min(num_rec, 20)  # Limit to 20 recommendations max

        # Check alternative patterns
        alt_pattern = r'movies? similar to (.+)'
        alt_match = re.search(alt_pattern, user_input, re.IGNORECASE)
        if alt_match:
            return alt_match.group(1).strip(), 5

        # Default case - assume the entire input is a movie title
        return user_input.strip(), 5
    except Exception as e:
        print(f"Error in parse_input: {e}")
        return user_input.strip(), 5



def respond(message, chat_history):
    try:
        # Parse the input to get movie name and number of recommendations
        movie_name, num_rec = parse_input(message)

        # Get recommendations
        original_title, recommendations = recommend(movie_name, num_rec)

        if recommendations is None:
            response = f"I couldn't find '{movie_name}' in my database. Could you try a different movie title?"
            chat_history.append((message, response))
            return "", chat_history

        # Format recommendations
        if num_rec == 1:
            rec_text = f"Here's 1 movie similar to {original_title}:\n"
        else:
            rec_text = f"Here are {num_rec} movies similar to {original_title}:\n"

        rec_text += "\n".join(f"{i+1}. {title}" for i, title in enumerate(recommendations))

        # Generate conversational response
        prompt = f"""User: I like the movie {original_title}. Recommend something similar.
Bot: I'd be happy to recommend some movies similar to {original_title}! """

        try:
            response = chatbot(prompt, max_length=150)[0]['generated_text']
        except:
            response = f"I think you'll enjoy these movies similar to {original_title}:"

        # Combine both responses
        full_response = f"{response}\n\n{rec_text}"
        chat_history.append((message, full_response))
        return "", chat_history
    except Exception as e:
        print(f"Error in respond function: {e}")
        error_response = "Sorry, I encountered an error processing your request. Please try again."
        chat_history.append((message, error_response))
        return "", chat_history

css = """
/* Fix user messages */
.gr-chat-message.gr-chat-message-user .gr-chat-message-text {
    color: #000000 !important;
    opacity: 1 !important;
    font-weight: 600;
}

/* Fix bot messages */
.gr-chat-message.gr-chat-message-bot .gr-chat-message-text,
.gr-chat-message.gr-chat-message-bot .markdown {
    color: #1e1e1e !important;
    opacity: 1 !important;
    font-weight: 500;
}

/* Optional: improve markdown elements inside bot responses */
.gr-chat-message-bot .markdown p,
.gr-chat-message-bot .markdown li {
    color: #1e1e1e !important;
    opacity: 1 !important;
    font-weight: 500;
}
"""
with gr.Blocks(theme=gr.themes.Base(), css=css) as demo:
    gr.Markdown("""
    # ðŸŽ¬ Movie Recommender Chatbot
    ### Powered by Machine Learning & Natural Language Processing
    """)

    with gr.Row():
        with gr.Column(scale=3):
            chatbot_ui = gr.Chatbot(height=500, label="Chat History")
            msg = gr.Textbox(
                placeholder="Type a movie you like (e.g., 'Harry Potter') or ask for recommendations...",
                label="Your Message"
            )
        with gr.Column(scale=1):
            gr.Markdown("### Examples to try:")
            gr.Examples(
                examples=[
                    "The Dark Knight",
                    "recommend 3 movies like Inception",
                    "movies similar to Titanic",
                    "Harry Potter",
                    "The Shawshank Redemption"
                ],
                inputs=msg,
                label="Try these examples"
            )

    with gr.Row():
        clear = gr.Button("Clear Chat", variant="secondary")
        submit = gr.Button("Send", variant="primary")

    msg.submit(respond, [msg, chatbot_ui], [msg, chatbot_ui])
    submit.click(respond, [msg, chatbot_ui], [msg, chatbot_ui])
    clear.click(lambda: None, None, chatbot_ui, queue=False)

demo.launch()

